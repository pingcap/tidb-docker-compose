{{- $pdSize := .Values.pd.size | int }}
{{- $tikvSize := .Values.tikv.size | int }}
{{- define "initial_cluster" }}
{{- range until (.Values.pd.size | int) }}{{if .}},{{end}}pd{{.}}=http://pd{{.}}:2380{{- end }}
{{- end }}
{{- define "pd_list" }}
{{- range until (.Values.pd.size | int) }}{{if .}},{{end}}pd{{.}}:2379{{- end }}
{{- end }}
{{- $grafanaImage := .Values.grafana.image | default "grafana/grafana:4.2.0" }}
{{- $grafanaPort := .Values.grafana.port | default "3000" }}
{{- $prometheusImage := .Values.prometheus.image | default "prom/prometheus:v2.0.0" }}
{{- $prometheusPort := .Values.prometheus.port | default "9090" }}
{{- $pushgatewayImage := .Values.pushgateway.image | default "prom/pushgateway:v0.3.1" }}
{{- $dashboardInstallerImage := .Values.dashboardInstaller.image | default "pingcap/tidb-dashboard-installer:v1.0.0" }}
version: '2.3'

services:
  {{- range until $pdSize }}
  pd{{ . }}:
    {{- if $.Values.pd.image }}
    image: {{ $.Values.pd.image }}
    {{- else }}
    image: pd:latest
    build:
      context: ./pd
      {{- if eq $.Values.pd.buildFrom "remote" }}
      dockerfile: Dockerfile.src
      args:
        repo: {{ $.Values.pd.repo | default "https://github.com/pingcap/pd.git" }}
        branch: {{ $.Values.pd.branch | default "master" }}
      {{- else }}
      dockerfile: Dockerfile.bin
      {{- end }}
    {{- end }}
    ports:
      - "2379"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/pd.toml:/pd.toml:ro
      - {{ $.Values.data_dir }}:/data
    command:
      - --name=pd{{ . }}
      - --client-urls=http://0.0.0.0:2379
      - --peer-urls=http://0.0.0.0:2380
      - --advertise-client-urls=http://pd{{ . }}:2379
      - --advertise-peer-urls=http://pd{{ . }}:2380
      - --initial-cluster={{- template "initial_cluster" $ }}
      - --data-dir=/data/pd{{ . }}
      - --config=/pd.toml
    # sysctls:
    #   net.core.somaxconn: 32768
    # ulimits:
    #   nofile:
    #     soft: 1000000
    #     hard: 1000000
    restart: on-failure
  {{- end }}

  {{- range until $tikvSize }}
  tikv{{ . }}:
    {{- if $.Values.tikv.image }}
    image: {{ $.Values.tikv.image }}
    {{- else }}
    image: tikv:latest
    build:
      context: ./tikv
      {{- if eq $.Values.tikv.buildFrom "remote" }}
      dockerfile: Dockerfile.src
      args:
        repo: {{ $.Values.tikv.repo | default "https://github.com/pingcap/tikv.git" }}
        branch: {{ $.Values.tikv.branch | default "master" }}
        rustupVersion: {{ $.Values.rustupVersion | default "1.7.0" }}
        rust_toolchain: {{ $.Values.rustToolChain | default "nightly-2017-08-09" }}
      {{- else }}
      dockerfile: Dockerfile.bin
      {{- end }}
    {{- end }}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/tikv.toml:/tikv.toml:ro
      - {{ $.Values.data_dir }}:/data
    command:
      - --addr=0.0.0.0:20160
      - --advertise-addr=tikv{{ . }}:20160
      - --data-dir=/data/tikv{{ . }}
      - --pd={{- template "pd_list" $ }}
      - --config=/tikv.toml
    depends_on:
      {{- range until $pdSize }}
      - "pd{{.}}"
      {{- end }}
    # sysctls:
    #   net.core.somaxconn: 32768
    # ulimits:
    #   nofile:
    #     soft: 1000000
    #     hard: 1000000
    restart: on-failure
  {{- end }}

  tidb:
    {{- if .Values.tidb.image }}
    image: {{ .Values.tidb.image }}
    {{- else }}
    image: tidb:latest
    build:
      context: ./tidb
      {{- if eq .Values.tidb.buildFrom "remote" }}
      dockerfile: Dockerfile.src
      args:
        repo: {{ .Values.tidb.repo | default "https://github.com/pingcap/tidb.git" }}
        branch: {{ .Values.tidb.branch | default "master" }}
      {{- else }}
      dockerfile: Dockerfile.bin
      {{- end }}
    {{- end }}
    ports:
      {{- if .Values.tidb.mysqlPort }}
      - "{{ .Values.tidb.mysqlPort }}:4000"
      {{- else }}
      - "4000"
      {{- end }}
      {{- if .Values.tidb.statusPort }}
      - "{{ .Values.tidb.statusPort }}:10080"
      {{- else }}
      - "4000"
      {{- end }}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/tidb.toml:/tidb.toml:ro
    command:
      - --store=tikv
      - --path={{- template "pd_list" $ }}
      - --config=/tidb.toml
      - -L=warn
    depends_on:
      {{- range until $tikvSize }}
      - "tikv{{.}}"
      {{- end }}
    # sysctls:
    #   net.core.somaxconn: 32768
    # ulimits:
    #   nofile:
    #     soft: 1000000
    #     hard: 1000000
    restart: on-failure

{{- if .Values.tidbVision }}
  tidb-vision:
    {{- if .Values.tidbVision.image }}
    image: {{ .Values.tidbVision.image }}
    {{- else }}
    image: tidb-vision:latest
    build:
      context: ./tidb-vision
      {{- if eq .Values.tidbVision.buildFrom "remote" }}
      dockerfile: Dockerfile.remote
      args:
        repo: {{ .Values.tidbVision.repo | default "https://github.com/pingcap/tidb-vision.git" }}
        branch: {{ .Values.tidbVision.branch | default "master" }}
      {{- else }}
      dockerfile: Dockerfile.local
      {{- end }}
    {{- end }}
    environment:
      # TODO: we use only one pd endpoint
      # because tidb-vision doesn't support multiple pd endpoint now
      PD_ENDPOINT: pd0:2379
    ports:
      {{- if .Values.tidbVision.port }}
      - "{{ .Values.tidbVision.port }}:8010"
      {{- else }}
      - "8010"
      {{- end }}
{{- end }}

  # monitors
  pushgateway:
    image: {{ $pushgatewayImage }}
    volumes:
      - /etc/localtime:/etc/localtime:ro
    restart: on-failure
  prometheus:
    user: root
    image: {{ $prometheusImage }}
    command:
      - --storage.tsdb.path=/data/prometheus
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      {{- if $prometheusPort }}
      - "{{ $prometheusPort }}:9090"
      {{- else }}
      - "9090"
      {{- end }}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
      - {{ .Values.data_dir }}:/data
    restart: on-failure
  grafana:
    image: {{ $grafanaImage }}
    ports:
      {{- if $grafanaPort }}
      - "{{ $grafanaPort }}:3000"
      {{- else }}
      - "3000"
      {{- end }}
    volumes:
      - /etc/localtime:/etc/localtime:ro
    restart: on-failure
  dashboard-installer:
    image: {{ $dashboardInstallerImage }}
    command: ["grafana:3000"]
    volumes:
      - ./config/grafana-datasource.json:/datasource.json:ro
      - ./config/pd-dashboard.json:/pd.json:ro
      - ./config/tikv-dashboard.json:/tikv.json:ro
      - ./config/tidb-dashboard.json:/tidb.json:ro
      - ./config/overview-dashboard.json:/overview.json:ro
    restart: on-failure
