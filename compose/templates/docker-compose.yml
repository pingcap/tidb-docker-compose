{{- $pdSize := .Values.pd.size | int }}
{{- $tikvSize := .Values.tikv.size | int }}
{{- $tisparkWorkerCount := .Values.tispark.workerCount | int }}
{{- define "initial_cluster" }}
{{- range until (.Values.pd.size | int) }}{{if .}},{{end}}pd{{.}}=http://pd{{.}}:2380{{- end }}
{{- end }}
{{- define "pd_list" }}
{{- range until (.Values.pd.size | int) }}{{if .}},{{end}}pd{{.}}:2379{{- end }}
{{- end }}
{{- $grafanaImage := .Values.grafana.image | default "grafana/grafana:4.6.3" }}
{{- $grafanaPort := .Values.grafana.port | default "3000" }}
{{- $prometheusImage := .Values.prometheus.image | default "prom/prometheus:v2.0.0" }}
{{- $prometheusPort := .Values.prometheus.port | default "9090" }}
{{- $pushgatewayImage := .Values.pushgateway.image | default "prom/pushgateway:v0.3.1" }}
{{- $dashboardInstallerImage := .Values.dashboardInstaller.image | default "pingcap/tidb-dashboard-installer:v1.0.0" }}
version: '2.1'

services:
  {{- range until $pdSize }}
  pd{{ . }}:
    {{- if $.Values.pd.image }}
    image: {{ $.Values.pd.image }}
    {{- else }}
    image: pd:latest
    build:
      context: {{ $.Values.pd.buildPath | default "./pd" }}
      dockerfile: {{ $.Values.pd.dockerfile | default "Dockerfile" }}
    {{- end }}
    ports:
      - "2379"
    volumes:
      - ./config/pd.toml:/pd.toml:ro
      - {{ $.Values.data_dir }}:/data
    command:
      - --name=pd{{ . }}
      - --client-urls=http://0.0.0.0:2379
      - --peer-urls=http://0.0.0.0:2380
      - --advertise-client-urls=http://pd{{ . }}:2379
      - --advertise-peer-urls=http://pd{{ . }}:2380
      - --initial-cluster={{- template "initial_cluster" $ }}
      - --data-dir=/data/pd{{ . }}
      - --config=/pd.toml
    # sysctls:
    #   net.core.somaxconn: 32768
    # ulimits:
    #   nofile:
    #     soft: 1000000
    #     hard: 1000000
    restart: on-failure
  {{- end }}

  {{- range until $tikvSize }}
  tikv{{ . }}:
    {{- if $.Values.tikv.image }}
    image: {{ $.Values.tikv.image }}
    {{- else }}
    image: tikv:latest
    build:
      context: {{ $.Values.tikv.buildPath | default "./tikv" }}
      dockerfile: {{ $.Values.tikv.dockerfile | default "Dockerfile" }}
    {{- end }}
    volumes:
      - ./config/tikv.toml:/tikv.toml:ro
      - {{ $.Values.data_dir }}:/data
    command:
      - --addr=0.0.0.0:20160
      - --advertise-addr=tikv{{ . }}:20160
      - --data-dir=/data/tikv{{ . }}
      - --pd={{- template "pd_list" $ }}
      - --config=/tikv.toml
    depends_on:
      {{- range until $pdSize }}
      - "pd{{.}}"
      {{- end }}
    # sysctls:
    #   net.core.somaxconn: 32768
    # ulimits:
    #   nofile:
    #     soft: 1000000
    #     hard: 1000000
    restart: on-failure
  {{- end }}

  tidb:
    {{- if .Values.tidb.image }}
    image: {{ .Values.tidb.image }}
    {{- else }}
    image: tidb:latest
    build:
      context: {{ .Values.tidb.buildPath | default "./tidb" }}
      dockerfile: {{ .Values.tidb.dockerfile | default "Dockerfile" }}
    {{- end }}
    ports:
      {{- if .Values.tidb.mysqlPort }}
      - "{{ .Values.tidb.mysqlPort }}:4000"
      {{- else }}
      - "4000"
      {{- end }}
      {{- if .Values.tidb.statusPort }}
      - "{{ .Values.tidb.statusPort }}:10080"
      {{- else }}
      - "4000"
      {{- end }}
    volumes:
      - ./config/tidb.toml:/tidb.toml:ro
    command:
      - --store=tikv
      - --path={{- template "pd_list" $ }}
      - --config=/tidb.toml
    depends_on:
      {{- range until $tikvSize }}
      - "tikv{{.}}"
      {{- end }}
    # sysctls:
    #   net.core.somaxconn: 32768
    # ulimits:
    #   nofile:
    #     soft: 1000000
    #     hard: 1000000
    restart: on-failure

{{- if .Values.tispark }}
  tispark-master:
    {{- if .Values.tispark.image }}
    image: {{ .Values.tispark.image }}
    {{- else }}
    image: tispark:latest
    build:
      context: {{ .Values.tispark.buildPath | default "./tispark" }}
      dockerfile: {{ .Values.tispark.dockerfile | default "Dockerfile" }}
    {{- end }}
    command:
      - /opt/spark/sbin/start-master.sh
    volumes:
      - ./config/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
    environment:
      SPARK_MASTER_PORT: {{ .Values.tispark.masterPort }}
      SPARK_MASTER_WEBUI_PORT: {{ .Values.tispark.webuiPort }}
    ports:
      - "{{ .Values.tispark.masterPort }}:7077"
      - "{{ .Values.tispark.webuiPort }}:8080"
    depends_on:
      {{- range until $tikvSize }}
      - "tikv{{.}}"
      {{- end }}
    restart: on-failure
  {{- range until $tisparkWorkerCount }}
  tispark-slave{{ . }}:
    {{- if $.Values.tispark.image }}
    image: {{ $.Values.tispark.image }}
    {{- else }}
    image: tispark:latest
    build:
      context: {{ $.Values.tispark.buildPath | default "./tispark" }}
      dockerfile: {{ $.Values.tispark.dockerfile | default "Dockerfile" }}
    {{- end }}
    command:
      - /opt/spark/sbin/start-slave.sh
      - spark://tispark-master:7077
    volumes:
      - ./config/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
    environment:
      SPARK_WORKER_WEBUI_PORT: {{ add $.Values.tispark.workerWebUIPort . }}
    ports:
      - "{{ add $.Values.tispark.workerWebUIPort . }}:{{ add $.Values.tispark.workerWebUIPort . }}"
    depends_on:
      - tispark-master
    restart: on-failure
  {{- end }}
{{ end }}

{{- if .Values.tidbVision }}
  tidb-vision:
    {{- if .Values.tidbVision.image }}
    image: {{ .Values.tidbVision.image }}
    {{- else }}
    image: tidb-vision:latest
    build:
      context: {{ .Values.tidbVision.buildPath | default "./tidb-vision" }}
      dockerfile: {{ .Values.tidbVision.dockerfile | default "Dockerfile" }}
    {{- end }}
    environment:
      PD_ENDPOINT: {{ range until $pdSize }}pd{{.}}:2379 {{ end }}
    ports:
      {{- if .Values.tidbVision.port }}
      - "{{ .Values.tidbVision.port }}:8010"
      {{- else }}
      - "8010"
      {{- end }}
{{- end }}

  # monitors
  pushgateway:
    image: {{ $pushgatewayImage }}
    restart: on-failure
  prometheus:
    user: root
    image: {{ $prometheusImage }}
    command:
      - --storage.tsdb.path=/data/prometheus
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      {{- if $prometheusPort }}
      - "{{ $prometheusPort }}:9090"
      {{- else }}
      - "9090"
      {{- end }}
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
      - {{ .Values.data_dir }}:/data
    restart: on-failure
  grafana:
    image: {{ $grafanaImage }}
    ports:
      {{- if $grafanaPort }}
      - "{{ $grafanaPort }}:3000"
      {{- else }}
      - "3000"
      {{- end }}
    restart: on-failure
  dashboard-installer:
    image: {{ $dashboardInstallerImage }}
    command: ["grafana:3000"]
    volumes:
      - ./config/grafana-datasource.json:/datasource.json:ro
      - ./config/pd-dashboard.json:/pd.json:ro
      - ./config/tikv-dashboard.json:/tikv.json:ro
      - ./config/tidb-dashboard.json:/tidb.json:ro
      - ./config/overview-dashboard.json:/overview.json:ro
    restart: on-failure
