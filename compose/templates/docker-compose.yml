{{- $pdSize := .Values.pd.size | int }}
{{- $tikvSize := .Values.tikv.size | int }}
{{- $pdPort := .Values.pd.port | int }}
{{- $pdPeerPort := add $pdPort 10000 }}
{{- $tikvPort := .Values.tikv.port | int }}
{{- $tisparkWorkerCount := .Values.tispark.workerCount | int }}
{{- define "initial_cluster" }}
  {{- range until (.Values.pd.size | int) }}
    {{- if . -}}
      ,
    {{- end -}}
    pd{{ . }}=http://
    {{- if eq $.Values.networkMode "host" -}}
      127.0.0.1:{{add (add ($.Values.pd.port | int) 10000) . }}
    {{- else -}}
      pd{{ . }}:2380
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- define "pd_list" }}
  {{- range until (.Values.pd.size | int) }}
    {{- if . -}}
      ,
    {{- end -}}
    {{- if eq $.Values.networkMode "host" -}}
      127.0.0.1:{{ add ($.Values.pd.port | int) . }}
    {{- else -}}
      pd{{ . }}:2379
    {{- end -}}
  {{- end -}}
{{- end -}}

version: '2.1'

services:
  {{- range until $pdSize }}
  pd{{ . }}:
    {{- if $.Values.pd.image }}
    image: {{ $.Values.pd.image }}
    {{- else }}
    image: pd:latest
    build:
      context: {{ $.Values.pd.buildPath | default "./pd" }}
      dockerfile: {{ $.Values.pd.dockerfile | default "Dockerfile" }}
    {{- end }}
    {{- if eq $.Values.networkMode "host" }}
    network_mode: host
    {{- else }}
    ports:
      - "2379"
    {{- end }}
    volumes:
      - ./config/pd.toml:/pd.toml:ro
      - {{ $.Values.dataDir }}:/data
      - {{ $.Values.logsDir }}:/logs
    command:
      - --name=pd{{ . }}
      {{- if eq $.Values.networkMode "host" }}
      - --client-urls=http://0.0.0.0:{{ add $pdPort . }}
      - --peer-urls=http://0.0.0.0:{{ add $pdPeerPort . }}
      - --advertise-client-urls=http://127.0.0.1:{{ add $pdPort . }}
      - --advertise-peer-urls=http://127.0.0.1:{{ add $pdPeerPort . }}
      {{- else }}
      - --client-urls=http://0.0.0.0:2379
      - --peer-urls=http://0.0.0.0:2380
      - --advertise-client-urls=http://pd{{ . }}:2379
      - --advertise-peer-urls=http://pd{{ . }}:2380
      {{- end }}
      - --initial-cluster={{- template "initial_cluster" $ }}
      - --data-dir=/data/pd{{ . }}
      - --config=/pd.toml
      - --log-file=/logs/pd{{ . }}.log
    # sysctls:
    #   net.core.somaxconn: 32768
    # ulimits:
    #   nofile:
    #     soft: 1000000
    #     hard: 1000000
    restart: on-failure
  {{ end }}

  {{- range until $tikvSize }}
  tikv{{ . }}:
    {{- if $.Values.tikv.image }}
    image: {{ $.Values.tikv.image }}
    {{- else }}
    image: tikv:latest
    build:
      context: {{ $.Values.tikv.buildPath | default "./tikv" }}
      dockerfile: {{ $.Values.tikv.dockerfile | default "Dockerfile" }}
    {{- end }}
    {{- if eq $.Values.networkMode "host" }}
    network_mode: host
    {{- end }}
    volumes:
      - ./config/tikv.toml:/tikv.toml:ro
      - {{ $.Values.dataDir }}:/data
      - {{ $.Values.logsDir }}:/logs
    command:
      {{- if eq $.Values.networkMode "host" }}
      - --addr=0.0.0.0:{{ add $tikvPort . }}
      - --advertise-addr=127.0.0.1:{{ add $tikvPort . }}
      {{- else }}
      - --addr=0.0.0.0:20160
      - --advertise-addr=tikv{{ . }}:20160
      {{- end }}
      - --data-dir=/data/tikv{{ . }}
      - --pd={{- template "pd_list" $ }}
      - --config=/tikv.toml
      - --log-file=/logs/tikv{{ . }}.log
    depends_on:
      {{- range until $pdSize }}
      - "pd{{.}}"
      {{- end }}
    # sysctls:
    #   net.core.somaxconn: 32768
    # ulimits:
    #   nofile:
    #     soft: 1000000
    #     hard: 1000000
    restart: on-failure
  {{ end }}

  {{- if .Values.tidb }}
  tidb:
    {{- if .Values.tidb.image }}
    image: {{ .Values.tidb.image }}
    {{- else }}
    image: tidb:latest
    build:
      context: {{ .Values.tidb.buildPath | default "./tidb" }}
      dockerfile: {{ .Values.tidb.dockerfile | default "Dockerfile" }}
    {{- end }}
    {{- if eq .Values.networkMode "host" }}
    network_mode: host
    {{- else }}
    ports:
      - "{{ .Values.tidb.mysqlPort }}:4000"
      - "{{ .Values.tidb.statusPort }}:10080"
    {{- end }}
    volumes:
      - ./config/tidb.toml:/tidb.toml:ro
      - {{ .Values.logsDir }}:/logs
    command:
      - --store=tikv
      - --path={{- template "pd_list" $ }}
      - --config=/tidb.toml
      - --log-file=/logs/tidb.log
    depends_on:
      {{- range until $tikvSize }}
      - "tikv{{.}}"
      {{- end }}
    # sysctls:
    #   net.core.somaxconn: 32768
    # ulimits:
    #   nofile:
    #     soft: 1000000
    #     hard: 1000000
    restart: on-failure
  {{ end }}

  {{- if .Values.tispark }}
  tispark-master:
    {{- if .Values.tispark.image }}
    image: {{ .Values.tispark.image }}
    {{- else }}
    image: tispark:latest
    build:
      context: {{ .Values.tispark.buildPath | default "./tispark" }}
      dockerfile: {{ .Values.tispark.dockerfile | default "Dockerfile" }}
    {{- end }}
    command:
      - /opt/spark/sbin/start-master.sh
    volumes:
      - ./config/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
    environment:
      SPARK_MASTER_PORT: {{ .Values.tispark.masterPort }}
      SPARK_MASTER_WEBUI_PORT: {{ .Values.tispark.webuiPort }}
    ports:
      - "{{ .Values.tispark.masterPort }}:7077"
      - "{{ .Values.tispark.webuiPort }}:8080"
    depends_on:
      {{- range until $tikvSize }}
      - "tikv{{.}}"
      {{- end }}
    restart: on-failure
  {{- range until $tisparkWorkerCount }}
  tispark-slave{{ . }}:
    {{- if $.Values.tispark.image }}
    image: {{ $.Values.tispark.image }}
    {{- else }}
    image: tispark:latest
    build:
      context: {{ $.Values.tispark.buildPath | default "./tispark" }}
      dockerfile: {{ $.Values.tispark.dockerfile | default "Dockerfile" }}
    {{- end }}
    command:
      - /opt/spark/sbin/start-slave.sh
      - spark://tispark-master:7077
    volumes:
      - ./config/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
    environment:
      SPARK_WORKER_WEBUI_PORT: {{ add $.Values.tispark.workerWebUIPort . }}
    ports:
      - "{{ add $.Values.tispark.workerWebUIPort . }}:{{ add $.Values.tispark.workerWebUIPort . }}"
    depends_on:
      - tispark-master
    restart: on-failure
  {{- end }}
  {{ end }}

  {{- if .Values.tidbVision }}
  tidb-vision:
    {{- if .Values.tidbVision.image }}
    image: {{ .Values.tidbVision.image }}
    {{- else }}
    image: tidb-vision:latest
    build:
      context: {{ .Values.tidbVision.buildPath | default "./tidb-vision" }}
      dockerfile: {{ .Values.tidbVision.dockerfile | default "Dockerfile" }}
    {{- end }}
    environment:
      PD_ENDPOINT: {{if eq .Values.networkMode "host"}}127.0.0.1:{{.Values.pd.port}}{{else}}pd0:2379{{end}}
    {{- if eq .Values.networkMode "host" }}
      PORT: {{ .Values.tidbVision.port }}
    network_mode: host
    {{- else }}
    ports:
      - "{{ .Values.tidbVision.port }}:8010"
    {{- end }}
    restart: on-failure
  {{- end }}

  # monitors
  {{- if .Values.prometheus }}
  pushgateway:
    image: {{ .Values.pushgateway.image }}
    {{- if eq .Values.networkMode "host" }}
    command:
      - --web.listen-address=0.0.0.0:{{.Values.pushgateway.port}}
      - --log.level={{ .Values.pushgateway.logLevel }}
    network_mode: host
    {{- else }}
    command:
      - --log.level={{ .Values.pushgateway.logLevel }}
    {{- end }}
    restart: on-failure

  prometheus:
    user: root
    image: {{ .Values.prometheus.image }}
    command:
      - --log.level={{ .Values.prometheus.logLevel }}
      - --storage.tsdb.path=/data/prometheus
      - --config.file=/etc/prometheus/prometheus.yml
    {{- if eq .Values.networkMode "host" }}
      - --web.listen-address=0.0.0.0:{{.Values.prometheus.port}}
    network_mode: host
    {{- else }}
    ports:
      - "{{ .Values.prometheus.port }}:9090"
    {{- end }}
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/pd.rules.yml:/etc/prometheus/pd.rules.yml:ro
      - ./config/tikv.rules.yml:/etc/prometheus/tikv.rules.yml:ro
      - ./config/tidb.rules.yml:/etc/prometheus/tidb.rules.yml:ro
      - {{ .Values.dataDir }}:/data
    restart: on-failure
  {{- end }}

  {{- if .Values.grafana }}
  grafana:
    image: {{ .Values.grafana.image }}
    {{- if eq .Values.networkMode "host" }}
    network_mode: host
    environment:
      GF_SERVER_HTTP_PORT: {{ .Values.grafana.port }}
      GF_LOG_LEVEL: {{ .Values.grafana.logLevel }}
    {{- else }}
    environment:
      GF_LOG_LEVEL: {{ .Values.grafana.logLevel }}
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_PATHS_CONFIG: /etc/grafana/grafana.ini
    ports:
      - "{{ .Values.grafana.port }}:3000"
    {{- end }}
    volumes:
      - ./config/grafana:/etc/grafana
      - ./config/dashboards:/var/lib/grafana/dashboards
    restart: on-failure
  dashboard-installer:
    {{- if .Values.dashboardInstaller.image }}
    image: {{ .Values.dashboardInstaller.image }}
    {{- else }}
    image: tidb-dashboard-installer:latest
    build:
      context: {{ .Values.dashboardInstaller.buildPath | default "./dashboard-installer" }}
      dockerfile: {{ .Values.dashboardInstaller.dockerfile | default "Dockerfile" }}
    {{- end }}
    {{- if eq .Values.networkMode "host" }}
    network_mode: host
    command: ["127.0.0.1:{{.Values.grafana.port}}"]
    {{- else }}
    command: ["grafana:3000"]
    {{- end }}
    restart: on-failure
  {{- end -}}
